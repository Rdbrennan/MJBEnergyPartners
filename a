//
//  MyInnerCircleVc.swift
//  Babz


import UIKit
import Apollo
import Contacts
import SwiftyJSON
import SendBirdSDK
import SendBirdSyncManager
class MyInnerCircleVc: BaseVc {

    @IBOutlet weak var viewX: UIView!
    @IBOutlet weak var viewMain: UIView!
    @IBOutlet weak var buttonBack: UIButton!
    @IBOutlet weak var labelMyInnerCircle: UILabel!
    @IBOutlet weak var labelHappiness: InteractiveLabel!
    @IBOutlet weak var textfieldSearchByName: SearchTextField!
    @IBOutlet weak var tableviewContacts: UITableView!
    @IBOutlet weak var conViewGroup: NSLayoutConstraint!
    @IBOutlet weak var vwCreateNew: UIControl!

    fileprivate var apollo: ApolloClient!
    fileprivate var arrData = [InnerCircleDM]() //TODO:- need to remove
    fileprivate var arrContacts = Array<CustomContactDM>() //TODO:- need to remove
    fileprivate var arrRetriveContacts = Array<FetchContactQuery.Data.Contact>()
    fileprivate var arrInnerCircle = Array<GetInnerCircleListQuery.Data.Friend>()
    fileprivate var temparrSearchRetriveContacts = Array<FetchContactQuery.Data.Contact>()
    fileprivate var temparrSearchInnerCircle = Array<GetInnerCircleListQuery.Data.Friend>()
    fileprivate var temparrSearchGroupChats = [SBDGroupChannel]()
    fileprivate var retreiveTempArrGroupChats = SendBirdManager.shared.channels.filter{$0.joinedMemberCount > 2}
    fileprivate var arrAppUserNumbers = Array<String>()
    fileprivate var shouldEditInnerCircle : Bool = false
    fileprivate var isSearchEnable : Bool = false
    fileprivate var arrNotes : [String] = ["Only people in your I-C will be able to view your status (current location when it is on, free/busy, availability details, photo/video updates).","Nobody will know who is in your I-C.","People will not be notified when you add them to your I-C.","When you message someone new, he/she is automatically added to your contacts.\n\n"]

    var isManage : Bool = false
    var isShowInnerCircle : Bool = false
    var showGroups: Bool = !SendBirdManager.shared.channels.filter{$0.joinedMemberCount > 2}.isEmpty
    var carbonNav: CarbonTabSwipeNavigation?
    let swipeRightGesture = UISwipeGestureRecognizer(target: self, action: #selector(actionBack))

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUpUI()
        if let tabVc = self.tabBarController as? TabBarVC{
            carbonNav = tabVc.carbonNav
        }
        if isManage{
            showGroups = false
        }

    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.setUpData()
        self.tabBarController?.tabBar.isHidden = true
        carbonNav?.pagesScrollView?.isScrollEnabled = false
        Utility.shared.scrollView = carbonNav?.pagesScrollView
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        carbonNav?.pagesScrollView?.isScrollEnabled = true
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        self.view.endEditing(true)
        self.view.hideActivityIndicator()
        self.tabBarController?.tabBar.isHidden = false

    }
    @IBAction func backTapped(_ sender: UIButton) {

            self.actionBack()
    }

}

// MARK:  Custom methods 
extension MyInnerCircleVc {
    func setUpUI() {
        swipeRightGesture.direction = .right
        swipeRightGesture.numberOfTouchesRequired = 1
        self.view.addGestureRecognizer(swipeRightGesture)

        apollo = NetworkManager.shared.client

        self.textfieldSearchByName.addLeftViewWith(image: UIImage(named: "search")!)
        self.textfieldSearchByName.addRightView(image: UIImage(named: "clear")!, action: #selector(self.actionClearTextField(btnClear:)), viewController: self)

        tableviewContacts.register(UINib(nibName: "ContactCell", bundle: nil), forCellReuseIdentifier: Const.CellIdentifier.InnerCirlceUserIndetifirer)
        tableviewContacts.register(UINib(nibName: "InnerCircelNoteCell", bundle: nil), forCellReuseIdentifier: "InnerCircleNoteIdentifier")
        tableviewContacts.separatorStyle = .none
        self.labelHappiness.isHidden = true
        self.textfieldSearchByName.isHidden = true
        self.tableviewContacts.isHidden = true

        if !self.isShowInnerCircle {
            self.updateLabelTitle()
            self.labelMyInnerCircle.text = ""
        } else {
            self.vwCreateNew.isHidden = true
            self.updateLabelTitle()
            self.labelMyInnerCircle.text = "My I-C and Contacts"
        }
    }

    func addUserToInnerCircle(btnAdd : UIButton) {
        if NetworkState.isConnected() {
            guard let userContact = self.arrRetriveContacts[btnAdd.tag].userContact else { return }
            self.view.showActivityIndicator()
            NetworkManager.shared.shouldPassAdmin = false
            NetworkManager.shared.client.perform(mutation: AddUserToInnerCircleMutation(otherUserId: userContact.id)) { (result) in
                self.view.hideActivityIndicator()
                NetworkManager.shared.shouldPassAdmin = true
                _ = result.map({ (data)  in
                    switch result {
                    case .success(_):
                        if data.errors != nil{
                            print(data.errors?.first.debugDescription as Any)
                        } else {
                            self.arrRetriveContacts.remove(at: btnAdd.tag)
                            self.getInnerCircleList { (success, arrFriends) in
                                if success {
                                    if self.arrInnerCircle.count > 0 {
                                        self.arrInnerCircle.removeAll()
                                    }

                                    self.arrInnerCircle = arrFriends as! [GetInnerCircleListQuery.Data.Friend]
                                    if self.arrInnerCircle.count > 0 {
                                        self.isShowInnerCircle = true
                                    } else {
                                        self.isShowInnerCircle = false
                                    }
                                    self.labelHappiness.isHidden = false
                                    self.textfieldSearchByName.isHidden = false
                                    self.updateLabelTitle()
                                    self.showUpdatedData()
                                }
                            }
                        }
                    case .failure(_):
                        NetworkManager.shared.shouldPassAdmin = true
                        self.showAlert(msg: data.errors?.first?.errorDescription ?? Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                    }
                })
            }
        } else {
            self.showAlert(msg: Const.kNoInternetConnection, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
        }
    }

    func removeUserFromInnerCircle(btnRemove:UIButton) {
        if NetworkState.isConnected() {
            self.view.showActivityIndicator()
            NetworkManager.shared.shouldPassAdmin = false
            NetworkManager.shared.client.perform(mutation: RemoveUserToInnerCircleMutation(otherUserId: self.arrInnerCircle[btnRemove.tag].userFriended.id)) { (result) in
                self.view.hideActivityIndicator()

                NetworkManager.shared.shouldPassAdmin = true
                _ = result.map({ (data)  in
                    switch result {
                    case .success(_):
                        if data.errors != nil{
                            self.view.hideActivityIndicator()
                            self.showAlert(msg: data.errors?.first?.errorDescription ?? Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                        } else {
                            self.view.hideActivityIndicator()
                            self.FetchAlreadyContacts()
                        }
                    case .failure(_):
                        self.view.hideActivityIndicator()
                        self.showAlert(msg: data.errors?.first?.errorDescription ?? Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                    }
                })
            }
        } else {
            self.showAlert(msg: Const.kNoInternetConnection, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
        }
    }

    func showUpdatedData() {
        let filteredPackages = self.arrRetriveContacts.filter { m in self.arrInnerCircle.contains(where: { $0.userFriended.id == m.userContact?.id }) }

        for item in filteredPackages{
            let index = self.arrRetriveContacts.firstIndex(where: {$0.userContact?.id == item.userContact?.id})
            if index != nil{
                self.arrRetriveContacts.remove(at: index!)
            }
        }

        self.temparrSearchRetriveContacts = self.arrRetriveContacts
        self.temparrSearchInnerCircle  = self.arrInnerCircle
        self.temparrSearchGroupChats = self.retreiveTempArrGroupChats
        print(self.retreiveTempArrGroupChats)
        self.tableviewContacts.isHidden = false
        self.tableviewContacts.reloadData()
    }

    func setUpData() {
        self.view.showActivityIndicator()
        self.FetchAlreadyContacts()

        Utility.checkContactPermission { (status) in
            if status == .authorized {
                self.view.hideActivityIndicator()
            } else if status == .denied {
                self.view.hideActivityIndicator()
                self.showAlert(msg: "You have denied contact permission. Please enable from settings.", okBtnTitle: Const.Ok, cancelBtnTitle: "Settings", okBtnCompletion: {
                    self.getInnerCircleAPI()
                }) {
                    guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else { return }
                    if UIApplication.shared.canOpenURL(settingsUrl) {
                        UIApplication.shared.open(settingsUrl, completionHandler: { (success) in
                            print("Settings opened: \(success)") // Prints true
                        })
                    }
                }
            } else {
                ObjContacts.requestContactPermission(completionHandler: { (contactStatus) in
                    self.view.hideActivityIndicator()
                    if contactStatus == .authorized {
                        self.FetchAlreadyContacts()
                    } else if contactStatus == .notDetermined {
                        self.showAlert(msg: "You have denied contact permission. Please enable from settings.", okBtnTitle: Const.Ok, cancelBtnTitle: "Settings", okBtnCompletion: {
                            //self.FetchAlreadyContacts()
                            self.getInnerCircleAPI()
                        }) {
                            guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else { return }
                            if UIApplication.shared.canOpenURL(settingsUrl) {
                                UIApplication.shared.open(settingsUrl, completionHandler: { (success) in
                                    print("Settings opened: \(success)") // Prints true
                                })
                            }
                        }
                    }
                })
            }
        }
    }

    func getAppUsers() {
        let phoneNumbers = self.arrRetriveContacts.map({$0.phoneNumber})

        self.view.showActivityIndicator()

        apollo.fetch(query: FetchBabzUserQuery(arrMobileNumber: phoneNumbers as! [String]) ,cachePolicy: .fetchIgnoringCacheCompletely) { (result) in
            self.view.hideActivityIndicator()

            _ = result.map({ (data)  in
                switch result {
                case .success(_):
                    self.view.hideActivityIndicator()
                    if data.errors != nil{
                        self.view.hideActivityIndicator()
                        self.showAlert(msg: data.errors?.first?.errorDescription ?? Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                    } else {
                        guard let data = data.data else {
                            self.view.hideActivityIndicator()
                            self.showAlert(msg: Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                            return
                        }

                        if data.users.count > 0 {
                            if self.arrAppUserNumbers.count > 0 {
                                self.arrAppUserNumbers.removeAll()
                            }
                            for user in data.users {
                                self.arrAppUserNumbers.append(user.phoneNumber)
                            }
                            DispatchQueue.main.async {
                                self.updateUserStatus()
                            }
                        } else {
                            DispatchQueue.main.async {
                                self.updateUserStatus()
                            }
                        }
                    }
                case .failure(_):
                    self.view.hideActivityIndicator()
                    self.showAlert(msg: data.errors?.first?.errorDescription ?? Const.kSomethingWentWrong, okBtnTitle: Const.Ok,cancelBtnTitle: nil, okBtnCompletion: {}) {}
                }
            })
        }
    }

    func updateUserStatus() {
        for indx in 0..<self.arrContacts.count {
            if arrAppUserNumbers.contains(self.arrContacts[indx].contact.phoneNumber) {
                self.arrContacts[indx].isAppUser = true
            }
        }
        self.tableviewContacts.reloadData()
        self.tableviewContacts.isHidden = false
    }

    func updateLabelTitle() {
        if isManage {
            showGroups = false
            if self.arrInnerCircle.count == 0 {
                self.labelHappiness.font = UIFont(name: "OpenSans-Italic", size: 14)

                self.labelHappiness.text = "It's all about your I-C"
                self.labelHappiness.interactiveWords = ((["It's all about your I-C"],UIFont(name: "OpenSans-Italic", size: 14)) as! ([String], UIFont))
                self.labelHappiness.textAlignment = .center
            } else {
                self.labelHappiness.font = UIFont(name: "OpenSans-Italic", size: 14)

                self.labelHappiness.text = "It's all about your I-C"
                self.labelHappiness.interactiveWords = ((["It's all about your I-C"],UIFont(name: "OpenSans-Italic", size: 14)) as! ([String], UIFont))
                self.labelHappiness.textAlignment = .center
            }
            self.conViewGroup.constant = 0
            self.vwCreateNew.isHidden = true
            self.labelMyInnerCircle.text = "Manage My I-C"
            self.labelHappiness.textAlignment = .center

        } else {
            if self.isShowInnerCircle {
                if self.arrInnerCircle.count > 0 {
                    self.conViewGroup.constant = 60
                    self.vwCreateNew.isHidden = false
                    self.labelHappiness.font = UIFont(name: "OpenSans-Italic", size: 14)
                    self.labelMyInnerCircle.text = "My I-C and Contacts"
                    self.labelHappiness.text = "It's all about your I-C"
                    self.labelHappiness.interactiveWords = ((["It's all about your I-C"],UIFont(name: "OpenSans-Italic", size: 14)) as! ([String], UIFont))
                    self.labelHappiness.textAlignment = .center

                } else {
                    self.conViewGroup.constant = 60
                    self.vwCreateNew.isHidden = false
                    self.labelMyInnerCircle.text = "My I-C and Contacts"
                    self.labelHappiness.text = "It's all about your I-C"
                    self.labelHappiness.interactiveWords = ((["It's all about your I-C"],UIFont(name: "OpenSans-Italic", size: 14)) as! ([String], UIFont))
                }

            } else {
                self.conViewGroup.constant = 60
                self.vwCreateNew.isHidden = false
                self.labelMyInnerCircle.text = "My I-C and Contacts"
                self.labelHappiness.text = "It's all about your I-C"
                self.labelHappiness.interactiveWords = ((["It's all about your I-C"],UIFont(name: "OpenSans-Italic", size: 14)) as! ([String], UIFont))
            }
        }

        self.labelMyInnerCircle.isHidden = false
        self.labelHappiness.didGetTappedText = { (_) in }
    }

    func shareApp(sender:UIButton) {

        //        let textToShare = [Const.kShareApp]
        //        let activityViewController = UIActivityViewController(activityItems: textToShare, applicationActivities: nil)
        //        activityViewController.popoverPresentationController?.sourceView = self.view
        //
        //        activityViewController.excludedActivityTypes = [ ]
        //
        //        //self.present(activityViewController, animated: true, completion: nil)
        //        self.present(activityViewController, animated: true) {
        //            print(activityViewController)
        //        }

        guard let number = self.arrRetriveContacts[sender.tag].phoneNumber else { return }

        let activityItems: [Any] = [Const.kShareApp, PhoneNumberActivityItem(phoneNumber: number)]
        let extendedActivityVC = ExtendedActivityViewController(activityItems: activityItems, applicationActivities: nil)
        extendedActivityVC.popoverPresentationController?.sourceView = self.view
        self.present(extendedActivityVC, animated: true, completion: nil)
    }
}

// MARK:  Button action 
extension MyInnerCircleVc {
    @IBAction func actionCreateGroup(_ sender: UIControl) {
        let vc = UIStoryboard().getStoryboard(name: Const.StoryBoardName.kSBAvaibility).instantiateViewController(withIdentifier: Const.StroryBoardIds.kGroupContactListVCIdentifier) as! GroupContactListVC
        vc.arrInnerCircle = self.arrInnerCircle
        vc.carbonNav = self.carbonNav
        vc.hidesBottomBarWhenPushed = true

                self.navigationController?.pushViewController(vc, animated: true)

    }

    func goToChat(channel: SBDGroupChannel) {
        SendBirdManager.shared.connectToChannelWithUrl(channel.channelUrl) { channel, error  in
            guard let channel = channel else { return }
            if channel.memberCount > 2 {
                let vc = UIStoryboard.init(name: Const.StoryBoardName.kSBAvaibility, bundle: nil).instantiateViewController(withIdentifier: Const.StroryBoardIds.kGroupDetailVCIdentifier) as! GroupDetailVc
                vc.channel = channel
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)

            } else {
                let chatVC : ChatVc = UIStoryboard.init(name: Const.StoryBoardName.kSBAvaibility, bundle: nil).instantiateViewController(withIdentifier: Const.StroryBoardIds.kChatVcIdentifier) as! ChatVc
                chatVC.channel = channel
                chatVC.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(chatVC, animated: true)


            }
        }
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
                self.view.endEditing(true)
    }
    @objc func actionBtnMessage(btnMsg:UIButton) {
        self.view.endEditing(true)
        if !shouldEditInnerCircle {
            self.view.showActivityIndicator()
            connectToChannel(userId:btnMsg.accessibilityIdentifier!,indx: btnMsg.tag,shouldRedirect: true) { (channel) in
                self.view.hideActivityIndicator()
                if channel != nil {
                    let chatVC : ChatVc = UIStoryboard.init(name: Const.StoryBoardName.kSBAvaibility, bundle: nil).instantiateViewController(withIdentifier: "ChatVc") as! ChatVc
                    chatVC.channel = channel
                    chatVC.carbonNav = self.carbonNav
                    chatVC.hidesBottomBarWhenPushed = true
                    self.navigationController?.pushViewController(chatVC, animated: true)


                }
            }
            //self.navigateTo(storyboardId: Const.StroryBoardIds.kChatVcIdentifier, storyboard: UIStoryboard().getStoryboard(name: Const.StoryBoardName.kSBAvaibility), animated: true)
        }
    }

    @objc func actionBtnMultiType(btnType:UIButton) {
        self.view.endEditing(true)

        let objContact = self.arrData.filter({$0.id == btnType.accessibilityIdentifier ?? ""}).first

        if btnType.accessibilityHint == Const.ContactUserStatus.add.getTitle() {

            //            ObjUtility.isFirstTimeInnerCircle = false
            //objContact?.isInnerCircle = true
            //self.tableviewContacts.reloadData()
            //self.updateLabelTitle()
            self.addUserToInnerCircle(btnAdd: btnType)

        }else if btnType.accessibilityHint == Const.ContactUserStatus.remove.getTitle() {

            //objContact?.isInnerCircle = false
            //self.tableviewContacts.reloadData()
            //self.updateLabelTitle()

            self.removeUserFromInnerCircle(btnRemove: btnType)

        }else if btnType.accessibilityHint == Const.ContactUserStatus.invite.getTitle() {
            self.shareApp(sender: btnType)
        }else if btnType.accessibilityHint == Const.ContactUserStatus.message.getTitle() {

        }
    }

    @objc func redirectToProfileInnerCircle(sender:UIButton) {
        let profileVC : ProfileVC = UIStoryboard.init(name: Const.StoryBoardName.kSBHome, bundle: nil).instantiateViewController(withIdentifier: "ProfileVC") as! ProfileVC
        profileVC.otherProfile = true
        profileVC.isContact = false
        profileVC.otherProfileUserId = sender.accessibilityIdentifier!
        profileVC.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(profileVC, animated: true)

    }

    @objc func redirectToProfileContact(sender:UIButton) {
        let profileVC : ProfileVC = UIStoryboard.init(name: Const.StoryBoardName.kSBHome, bundle: nil).instantiateViewController(withIdentifier: "ProfileVC") as! ProfileVC
        profileVC.otherProfile = true
        profileVC.isContact = true
        profileVC.otherProfileUserId = sender.accessibilityIdentifier!
        profileVC.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(profileVC, animated: true)

    }

    @objc func actionBtnEditCircle(btnEdit:UIButton) {
        self.view.endEditing(true)
        let vc:MyInnerCircleVc = UIStoryboard.init(name: Const.StoryBoardName.kSBHome, bundle: nil).instantiateViewController(withIdentifier: Const.StroryBoardIds.kMyInnerCircleVcIdentifier) as! MyInnerCircleVc
        vc.isManage = true
        vc.isShowInnerCircle = false
        vc.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }

    @objc func actionClearTextField(btnClear: UIButton) {
        self.textfieldSearchByName.text = ""
    }

    func connectToChannel(userId:String,indx:Int,shouldRedirect:Bool = true,completionHandle:@escaping (SBDGroupChannel?) -> Void) {
        //print(self.arrChannels[indx].id)
        //TODO:-GET CHANNEL OF USERID-
        debugPrint("//TODO:-GET CHANNEL OF USERID-")
        guard let user = SBDMain.getCurrentUser() else { return }
        SendBirdManager.shared.connectToChannel(userIds: [userId, user.userId], completionHandler: { channel, error in
            self.view.hideActivityIndicator()
            if let channel = channel {
                let vc = UIStoryboard.init(name: Const.StoryBoardName.kSBAvaibility, bundle: nil).instantiateViewController(withIdentifier: Const.StroryBoardIds.kChatVcIdentifier) as! ChatVc
                vc.channel = channel
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)


            }
        })
    }
}

// MARK:  UITextField delegate 
extension MyInnerCircleVc : UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if let text = textField.text,
            let textRange = Range(range, in: text) {

            let updatedText = text.replacingCharacters(in: textRange,with: string)


            if updatedText == ""{
                self.arrInnerCircle = temparrSearchInnerCircle
                self.arrRetriveContacts = temparrSearchRetriveContacts
                self.retreiveTempArrGroupChats = SendBirdManager.shared.channels.filter{$0.joinedMemberCount > 2}
                self.tableviewContacts.reloadData()
                return true
            }

            print(self.temparrSearchInnerCircle.count)
            let inner = self.temparrSearchInnerCircle.filter( { (user) -> Bool in
                return (user.userFriended.firstName + " " + user.userFriended.lastName).lowercased().contains(updatedText.lowercased())
            })

            self.arrInnerCircle = inner

            print(arrRetriveContacts.count, arrContacts.count)

            let retrive = self.temparrSearchRetriveContacts.filter{(x) -> Bool in
                let babzName = (x.userContact?.firstName ?? "").lowercased() + " " + (x.userContact?.lastName ?? "").lowercased()
                let contactsName = (x.userContact?.username ?? "").lowercased() + (x.nickname?.lowercased() ?? "")
                let filterstring = babzName + contactsName
                print(filterstring)
                return filterstring.contains(updatedText.lowercased())
            }

            self.arrRetriveContacts = retrive

            let array = SendBirdManager.shared.channels.filter{$0.joinedMemberCount > 2}

            let results = array.filter { channel -> Bool in
                //channel.memebers.nicknames.contains(searchTerm).lowercased()

                let users = channel.members as! [SBDUser]
                let filteredUsers: [SBDUser] = users.filter{($0.nickname?.lowercased().contains(updatedText.lowercased()))!}

                print(users)
                print(updatedText)

                for user in filteredUsers {
                    print("search includes", user.nickname)
                }

                return !filteredUsers.isEmpty
            }

            self.retreiveTempArrGroupChats = results

            self.tableviewContacts.reloadData()
        }
        return true
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

// MARK:  TableView Delegate 
extension MyInnerCircleVc:UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        if isManage {
            return 2
        }
        if showGroups || !isManage {
            return 3
        } else {
            return 2
        }
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            if self.arrInnerCircle.count == 0 && !isShowInnerCircle && !isManage{
                return self.arrNotes.count
            } else if self.arrInnerCircle.count > 0 && isShowInnerCircle {
                return self.arrInnerCircle.count
            } else if self.isManage && self.arrInnerCircle.count == 0 {
                return self.arrNotes.count
            } else {
                return self.arrInnerCircle.count
            }
        } else if (section == 1 && showGroups == true ) || (section == 1 && !isManage){
            return retreiveTempArrGroupChats.count
        } else {
            return self.arrRetriveContacts.count
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.section == 0 {
            if self.arrInnerCircle.count == 0 && !isShowInnerCircle && !isManage {
                let cell : InnerCircelNoteCell = tableView.dequeueReusableCell(withIdentifier: "InnerCircleNoteIdentifier", for: indexPath) as! InnerCircelNoteCell
                cell.lblBullet.text = "\u{25CF}"
                cell.lblBullet.isHidden = false
                cell.lblNotes.text = self.arrNotes[indexPath.row]
                return cell

            } else if self.arrInnerCircle.count > 0 && isShowInnerCircle {
                let cell : ContactCell = tableView.dequeueReusableCell(withIdentifier: Const.CellIdentifier.InnerCirlceUserIndetifirer) as! ContactCell
                cell.btnMessage.isUserInteractionEnabled = true
                cell.groupView.isHidden = true
                cell.imageviewUser.isHidden = false
                cell.labelUserName.text = self.arrInnerCircle[indexPath.row].userFriended.firstName + " " + self.arrInnerCircle[indexPath.row].userFriended.lastName
                cell.labelUsesBabz.isHidden = true
                cell.buttonMultiType.isHidden = true
                cell.btnMessage.isHidden = false
                cell.imageviewUser.isHidden = false
                cell.imageviewUser.image = cell.imageviewUser.placeHolderImage(name: cell.labelUserName.text ?? "User")
                if self.arrInnerCircle[indexPath.row].userFriended.profilePhotos.count > 0 {
                    let photo = self.arrInnerCircle[indexPath.row].userFriended.profilePhotos.filter({$0.position == 0})
                    self.getInnerCircleProfilePhoto(photo: photo, imgUrl: cell.imageviewUser, placeholderText: cell.labelUserName.text!) { (success,img, error) in
                        if success {
                            debugPrint("Photo downloaded for \(indexPath)")
                        }
                    }
                }

                cell.buttonMultiType.tag = indexPath.row
                cell.btnAll.tag = indexPath.row

                let tplStatus : (String,UIColor) =  (self.shouldEditInnerCircle || isManage) ? Const.ContactUserStatus.remove.getStatus() : Const.ContactUserStatus.message.getStatus()
                if tplStatus.0 == "Message" {
                    cell.btnMessage.isHidden = false
                    cell.buttonMultiType.isHidden = true
                    cell.btnMessage.accessibilityIdentifier = self.arrInnerCircle[indexPath.row].userFriended.id
                    cell.btnMessage.accessibilityHint =  "Message"
                    cell.btnMessage.addTarget(self, action: #selector(self.actionBtnMessage(btnMsg:)), for: UIControl.Event.touchUpInside)
                } else {
                    cell.btnMessage.isHidden = true
                    cell.buttonMultiType.isHidden = false
                    cell.buttonMultiType.setTitle(tplStatus.0, for: UIControl.State.normal)
                    cell.buttonMultiType.layer.borderColor = tplStatus.1.cgColor
                    cell.buttonMultiType.setTitleColor(tplStatus.1, for: UIControl.State.normal)
                    cell.buttonMultiType.accessibilityHint = tplStatus.0
                    cell.buttonMultiType.addTarget(self, action: #selector(self.actionBtnMultiType(btnType:)), for: UIControl.Event.touchUpInside)
                }

                cell.btnAll.accessibilityIdentifier = arrInnerCircle[indexPath.row].userFriended.id
                cell.btnAll.removeTarget(self, action: #selector(self.redirectToProfileContact(sender:)), for: UIControl.Event.touchUpInside)
                cell.btnAll.addTarget(self, action: #selector(self.redirectToProfileInnerCircle(sender:)), for: UIControl.Event.touchUpInside)
                return cell

            } else if isManage && self.arrInnerCircle.count == 0 {
                let cell : InnerCircelNoteCell = tableView.dequeueReusableCell(withIdentifier: "InnerCircleNoteIdentifier", for: indexPath) as! InnerCircelNoteCell
                cell.lblBullet.text = "\u{25CF}"
                cell.lblBullet.text = "●"
                cell.lblBullet.isHidden = false
                cell.viewBullet.isHidden = false
                cell.lblNotes.text = self.arrNotes[indexPath.row]
                return cell

            } else {
                let cell : ContactCell = tableView.dequeueReusableCell(withIdentifier: Const.CellIdentifier.InnerCirlceUserIndetifirer) as! ContactCell
                cell.btnMessage.isUserInteractionEnabled = true
                cell.groupView.isHidden = true
                cell.imageviewUser.isHidden = false
                let tplStatus : (String,UIColor) =  (self.shouldEditInnerCircle || isManage) ? Const.ContactUserStatus.remove.getStatus() : Const.ContactUserStatus.message.getStatus()
                cell.labelUserName.text = self.arrInnerCircle[indexPath.row].userFriended.firstName + " " + self.arrInnerCircle[indexPath.row].userFriended.lastName
                cell.labelUsesBabz.isHidden = true
                cell.buttonMultiType.isHidden = true
                cell.btnMessage.isHidden = false
                cell.imageviewUser.isHidden = false
                cell.imageviewUser.image = cell.imageviewUser.placeHolderImage(name: cell.labelUserName.text ?? "User")
                if self.arrInnerCircle[indexPath.row].userFriended.profilePhotos.count > 0 {
                    let photo = self.arrInnerCircle[indexPath.row].userFriended.profilePhotos.filter({$0.position == 0})
                    self.getInnerCircleProfilePhoto(photo: photo, imgUrl: cell.imageviewUser, placeholderText: cell.labelUserName.text!) { (success,img, error) in
                        if success {
                            debugPrint("Photo downloaded for \(indexPath)")
                        }
                    }
                }
                cell.buttonMultiType.tag = indexPath.row
                cell.btnAll.tag = indexPath.row

                if tplStatus.0 == "Message" {
                    cell.btnMessage.isHidden = false
                    cell.buttonMultiType.isHidden = true
                    cell.btnMessage.accessibilityIdentifier = self.arrInnerCircle[indexPath.row].userFriended.id
                    cell.btnMessage.accessibilityHint =  "Message"
                    cell.btnMessage.addTarget(self, action: #selector(self.actionBtnMessage(btnMsg:)), for: UIControl.Event.touchUpInside)
                } else {
                    cell.btnMessage.isHidden = true
                    cell.buttonMultiType.isHidden = false
                    cell.buttonMultiType.setTitle(tplStatus.0, for: UIControl.State.normal)
                    cell.buttonMultiType.layer.borderColor = tplStatus.1.cgColor
                    cell.buttonMultiType.setTitleColor(tplStatus.1, for: UIControl.State.normal)
                    cell.buttonMultiType.accessibilityHint = tplStatus.0
                    cell.buttonMultiType.addTarget(self, action: #selector(self.actionBtnMultiType(btnType:)), for: UIControl.Event.touchUpInside)
                }

                cell.btnAll.accessibilityIdentifier = arrInnerCircle[indexPath.row].userFriended.id
                cell.btnAll.removeTarget(self, action: #selector(self.redirectToProfileContact(sender:)), for: UIControl.Event.touchUpInside)
                cell.btnAll.addTarget(self, action: #selector(self.redirectToProfileInnerCircle(sender:)), for: UIControl.Event.touchUpInside)
                return cell
            }

        } else if indexPath.section == 1 && showGroups == true {
            // My groups
            let cell : ContactCell = tableView.dequeueReusableCell(withIdentifier: Const.CellIdentifier.InnerCirlceUserIndetifirer) as! ContactCell
            let currentGroupChannel = retreiveTempArrGroupChats[indexPath.row]
            cell.groupView.isHidden = false
            cell.imageviewUser.isHidden = true

            cell.btnUserCount.setTitle("\(currentGroupChannel.memberCount - 1)+", for: UIControl.State.normal)

            guard let user = (currentGroupChannel.members as! [SBDUser]).filter({$0.userId != UserDM.shared.id}).first else {return cell}
            if let strUrl = user.profileUrl {
                cell.imgUser.setImage(url: strUrl, placeHolderText: user.nickname ?? "") { (img) in
                    cell.imgUser.image = img
                }
            } else {
                cell.imgUser.image = cell.imgUser.placeHolderImage(name: user.nickname ?? "")
            }

            if let users = currentGroupChannel.members as? [SBDUser] {
                let firstUser: SBDUser = users.filter({$0.userId != UserDefaults.standard.getLoggedInUserId()})[0]
                if currentGroupChannel.customName.isEmpty{
                    cell.labelUserName.text = "\(firstUser.nickname ?? "") & \(currentGroupChannel.joinedMemberCount - 1) others"
                }else{
                    cell.labelUserName.text = currentGroupChannel.customName
                }
            }

            if cell.labelUserName.text?.isEmpty ?? true{
                cell.labelUserName.text = currentGroupChannel.customName
            }

            cell.btnMessage.isHidden = false
            cell.btnMessage.isUserInteractionEnabled = false
            cell.buttonMultiType.isHidden = true
            cell.btnAll.removeTarget(self, action: #selector(self.redirectToProfileContact(sender:)), for: UIControl.Event.touchUpInside)
            cell.btnAll.removeTarget(self, action: #selector(self.redirectToProfileInnerCircle(sender:)), for: UIControl.Event.touchUpInside)
            cell.btnMessage.removeTarget(self, action: #selector(self.actionBtnMessage(btnMsg:)), for: UIControl.Event.touchUpInside)
            return cell

        } else {
            let cell : ContactCell = tableView.dequeueReusableCell(withIdentifier: Const.CellIdentifier.InnerCirlceUserIndetifirer) as! ContactCell
            cell.groupView.isHidden = true
            cell.imageviewUser.isHidden = false
            cell.btnMessage.isUserInteractionEnabled = true
            cell.buttonMultiType.isHidden = false
            cell.imageviewUser.isHidden = false

            var tplStatus : (String,UIColor) = Const.ContactUserStatus.message.getStatus()
            if let userContact = self.arrRetriveContacts[indexPath.row].userContact {
                if (self.isManage && !self.isShowInnerCircle ) || labelMyInnerCircle.text == "Manage My I-C" {
                    tplStatus = Const.ContactUserStatus.add.getStatus()
                } else {
                    tplStatus = Const.ContactUserStatus.message.getStatus()
                }
                cell.labelUsesBabz.isHidden = false
                cell.labelUserName.text = userContact.firstName + " " + userContact.lastName
                cell.buttonMultiType.accessibilityIdentifier = self.arrRetriveContacts[indexPath.row].phoneNumber
                cell.btnAll.accessibilityIdentifier = arrRetriveContacts[indexPath.row].userContact?.id
                cell.btnAll.removeTarget(self, action:  #selector(self.redirectToProfileInnerCircle(sender:)), for: .touchUpInside)
                cell.btnAll.addTarget(self, action: #selector(self.redirectToProfileContact(sender:)), for: UIControl.Event.touchUpInside)
            } else {
                tplStatus = Const.ContactUserStatus.invite.getStatus()
                cell.labelUsesBabz.isHidden = true
                cell.labelUserName.text = self.arrRetriveContacts[indexPath.row].nickname
                cell.buttonMultiType.accessibilityIdentifier = self.arrRetriveContacts[indexPath.row].phoneNumber
            }

            cell.imageviewUser.image = cell.imageviewUser.placeHolderImage(name: cell.labelUserName.text ?? "User")
            if self.arrRetriveContacts[indexPath.row].userContact?.profilePhotos.count ?? 0 > 0{
                let photo = self.arrRetriveContacts[indexPath.row].userContact!.profilePhotos.filter({$0.position == 0})
                self.getContactProfilePhoto(photo: photo, imgUrl: cell.imageviewUser, placeholderText: cell.labelUserName.text!) { (success,img, error) in
                    if success {
                        debugPrint("Photo downloaded for \(indexPath)")
                    }
                }
            }

            cell.buttonMultiType.tag = indexPath.row
            cell.btnAll.tag = indexPath.row
            if tplStatus.0 == "Message" {
                cell.btnMessage.isHidden = false
                cell.buttonMultiType.isHidden = true
                cell.btnMessage.accessibilityIdentifier = self.arrRetriveContacts[indexPath.row].userContact?.id
                cell.btnMessage.accessibilityHint = "Message"
                cell.btnMessage.addTarget(self, action: #selector(self.actionBtnMessage(btnMsg:)), for: UIControl.Event.touchUpInside)
            } else {
                cell.btnMessage.isHidden = true
                cell.buttonMultiType.isHidden = false
                cell.buttonMultiType.setTitle(tplStatus.0, for: UIControl.State.normal)
                cell.buttonMultiType.layer.borderColor = tplStatus.1.cgColor
                cell.buttonMultiType.setTitleColor(tplStatus.1, for: UIControl.State.normal)
                cell.buttonMultiType.accessibilityHint = tplStatus.0
                cell.buttonMultiType.addTarget(self, action: #selector(self.actionBtnMultiType(btnType:)), for: UIControl.Event.touchUpInside)
            }
            return cell
        }
    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let vwHEADER : MyInnerCircleHeaderView = Bundle.main.loadNibNamed("MyInnerCircleHeaderView", owner:self, options: nil)?.first as! MyInnerCircleHeaderView
        switch section {
        case 0:
            vwHEADER.lblTitle.text = "My I-C"
        case 1:
//            vwHEADER.lblTitle.text = showGroups == true ? "My Groups" : "My Contacts"

            if (section == 1 && showGroups == true ) || (section == 1 && !isManage){
                vwHEADER.lblTitle.text =  "My Groups"
            }else{
                vwHEADER.lblTitle.text =  "My Contacts"
            }

        default:
            vwHEADER.lblTitle.text = "My Contacts"
        }

        vwHEADER.btnEdit.addTarget(self, action: #selector(self.actionBtnEditCircle(btnEdit:)), for: UIControl.Event.touchUpInside)
        vwHEADER.btnEdit.titleLabel?.font = UIFont(name: "OpenSans-SemiBold", size: 14.0)

        if section == 0 {
            if self.arrInnerCircle.count == 0 || isManage{
                vwHEADER.btnEdit.isHidden = true
            } else {
                vwHEADER.btnEdit.isHidden = false
            }
        } else {
            vwHEADER.btnEdit.isHidden = true
        }
        return vwHEADER
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if showGroups == true && indexPath.section == 1 {
            let channels = SendBirdManager.shared.channels.filter{$0.memberCount > 2}
            goToChat(channel: channels[indexPath.row])
        }
    }
}


// MARK:  Optimized Methods
extension MyInnerCircleVc {
    // getInnerCircleList API call
    func getInnerCircleAPI() {
        self.getInnerCircleList { (success, arrFriends) in
            if success {
                if self.arrInnerCircle.count > 0 {
                    self.arrInnerCircle.removeAll()
                }

                self.arrInnerCircle = arrFriends as! [GetInnerCircleListQuery.Data.Friend]
                if self.arrInnerCircle.count > 0 {
                    self.isShowInnerCircle = true
                } else {
                    self.isShowInnerCircle = false
                }
                self.bubbleSort()

//                self.arrInnerCircle.sorted{ $0. >}
//                self.arrInnerCircle = self.arrInnerCircle[0].
                    self.labelHappiness.isHidden = false
                self.textfieldSearchByName.isHidden = false
                self.updateLabelTitle()
                self.showUpdatedData()
            }
        }
    }
    func bubbleSort(){
        for i in stride(from: arrInnerCircle.count-1, to: 0, by: -1) {
            for j in 1...i {
                if (arrInnerCircle[j-1].userFriended.firstName + " " + arrInnerCircle[j-1].userFriended.lastName) > (arrInnerCircle[j].userFriended.firstName + " " + arrInnerCircle[j].userFriended.lastName) {
                    let tmp = arrInnerCircle[j-1]
                    arrInnerCircle[j-1] = arrInnerCircle[j]
                    arrInnerCircle[j] = tmp
                }
            }
        }
    }
    //On Success of Uploading Contacts or After Denied Permission for Contatcs
    //Retriving Exising Contacts and Inner Circle
    func FetchAlreadyContacts() {
        self.fetchContacts { (success, data) in
            if success {
                if !self.arrRetriveContacts.isEmpty {
                    self.arrRetriveContacts.removeAll()
                }
                self.arrRetriveContacts = data as! [FetchContactQuery.Data.Contact]
                self.arrRetriveContacts = self.arrRetriveContacts.sorted { ($0.nickname?.uppercased() ?? $0.userContact?.firstName.uppercased() ?? "") < ($1.nickname?.uppercased() ?? $1.userContact?.firstName.uppercased() ?? "") }
                self.getInnerCircleAPI()
            }
        }
    }
}
